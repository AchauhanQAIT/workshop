|----------------------|        range 1
|--->                           range 2 overlap
 |--->                          range 2 overlap
                       |--->    range 2 no overlap
                        |--->   range 2 no overlap
------------------------------------------*
Manual Test Cases:
1. Verify that the difference of end date and start date for a given set is always a positive integer (end_date - start_date = some +ve integer)
2. Verify that the difference between end date and start date for a given set is always atleast 1 (end_date - start_date => 1)
3. Verify that for any set of two test dates, if following conditions are full-filled: StartDate1 <= EndDate2) and (StartDate2 < EndDate1. Then those set of dates are overlapping
4. Verify the overlap is start date for set 2 is under end date of set 1
5. Verify that there is no overlap when end date of set 1 and start date of set 2 are same
6. Verify that there is no overlap when start date of set 2 is ahead of end date of set 1


-------------------------------------------*
Equivalence partitioning scenarios:

                Invalid                              |                  Valid                           |                   Invalid
---------------------------------------------------------------------------------------------------------------------------------------------
zero days overlap with less gap in set of dates      | exact overlap of dates                           |  zero days of overlap with huge gap in set of dates
end date and start date are same
                                                     | 1,2 dates of overlap

---------------------------------------------*
Happy Path:
-> dates entered by user overlaps by some value [P1]
-> dates entered by user exactly overlaps for all values of date in that set [P1]



Negative Path:
-> User provided only one dates and there is no set of another dates to make a comparison [P1]
-> User enters the end date as some past date from that of entered start date [P2]
-> user enters the start date and end date as same i.e. no overlap as end date is excluded from the logic of overlap [P3]

----------------------------------------------*
Priority definition:
P1 - > critical
P2 - > important
P3 - > good to have

-------------------------------------------------*
Pseudo Code:

def doesOverlap (r1, r2):
    if r1.s > r2.s:
        swap r1, r2
    if r2.s >= r1.e:
        return false
    return true